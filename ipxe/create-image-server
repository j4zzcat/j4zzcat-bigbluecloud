#! /usr/bin/env ruby

require 'tempfile'
require 'open3'

# set env variable IBMCLOUD_API_KEY with your key

        region_name = "eu-gb"
           vpc_name = "testbed-1"
        subnet_name = "subnet-1"
       ssh_key_name = "imac-key"
resource_group_name = "testbed"

instance_name = "ipxe-image-server"
image_id      = "r018-14140f94-fcc4-11e9-96e7-a72723715315" # ubuntu-18.04
profile_name  = "bx2-2x8"

# ---- main ----
cloud_init_file_path = "/tmp/#{instance_name}.ci.yaml"
terraform_file_path  = "/tmp/#{instance_name}.tf"

ENV[ 'IBMCLOUD_COLOR' ] = 'false'

puts "Logging in..."
%x[ ibmcloud login --apikey #{ENV[ 'IBMCLOUD_API_KEY' ]} -r #{region_name}
    ibmcloud is target --gen 2 ]

puts "Resolving environment..."
          vpc_id  = %x[ ibmcloud is vpcs | tail -n +3 | awk '/ #{vpc_name} /{print $1}' ].chomp
        subnet_id = %x[ ibmcloud is subnets | tail -n +3 | awk '/ #{subnet_name} .* #{vpc_name} /{print $1}' ].chomp
        zone_name = %x[ ibmcloud is subnets | tail -n +3 | awk '/#{subnet_id}/{print $9}' ].chomp
      ssh_key_id  = %x[ ibmcloud is keys | tail -n +3 | awk '/ #{ssh_key_name} /{print $1}' ].chomp
resource_group_id = %x[ ibmcloud resource groups | tail -n +4 | awk '/#{resource_group_name} /{print $2}' ].chomp

puts "vpc/id      = #{vpc_name}/#{vpc_id}"
puts "region/zone = #{region_name}/#{zone_name}"
puts "subnet/id   = #{subnet_name}/#{subnet_id}"
puts "ssh_key/id  = #{ssh_key_name}/#{ssh_key_id}"
puts "resource_group/id = #{resource_group_name}/#{resource_group_id}"

cloud_init_script = <<~EOT
  #cloud-config
  runcmd:
    - apt update
    - DEBIAN_FRONTEND=noninteractive apt install -y vim mc git ruby apache2 gcc g++ make binutils liblzma-dev mtools mkisofs syslinux isolinux xorriso qemu-kvm
    - gem install --no-document sinatra
    - mkdir -p /usr/local/src
    - git clone https://github.com/ipxe/ipxe /usr/local/src/ipxe
    - cd /usr/local/src/ipxe/src
    - make
    - mkdir /var/images
    - wget http://cdimage.ubuntu.com/releases/19.10/release/ubuntu-19.10-server-amd64.iso -P /var/images
    - ln -s /var/images /var/www/html/images
EOT

File.open( cloud_init_file_path, 'w') { | f | f.write cloud_init_script }
puts "cloud init file = #{cloud_init_file_path}"

terraform_script = <<-EOT
  provider "ibm" {
    ibmcloud_api_key = "#{ENV[ 'IBMCLOUD_API_KEY' ]}"
    generation       = 2
    region           = "#{region_name}"
  }

resource "ibm_is_instance" "#{instance_name}" {
  name    = "#{instance_name}"
  image   = "#{image_id}"
  profile = "#{profile_name}"
  primary_network_interface {
    subnet = "#{subnet_id}"
  }
  vpc       = "#{vpc_id}"
  zone      = "#{zone_name}"
  keys      = [ "#{ssh_key_id}" ]
  user_data = file( "#{cloud_init_file_path}" )

  resource_group = "#{resource_group_id}"
}

resource "ibm_is_floating_ip" "#{instance_name}" {
  name   = "#{instance_name}"
  target = ibm_is_instance.#{instance_name}.primary_network_interface[ 0 ].id

  resource_group = "#{resource_group_id}"
}
EOT

File.open( terraform_file_path, 'w') { | f | f.write terraform_script }
puts "terraform file  = #{terraform_file_path}"

puts "Running terraform..."
%x[ terraform init #{File.dirname terraform_file_path} ]

cmd = "terraform apply -auto-approve #{File.dirname terraform_file_path}"
Open3.popen2e( cmd ) do | stdin, stdout_err, wait_thread |
  while line = stdout_err.gets
    puts line
  end
end
