#! /usr/bin/env ruby

require 'tempfile'
require 'open3'
require 'docopt'

ENV[ 'IBMCLOUD_COLOR' ] = 'false'

  HOME_DIR = File.expand_path( "#{File.dirname __FILE__}/.." )
   RUN_DIR = Dir.pwd
STATE_FILE = "#{RUN_DIR}/terraform.tfstate"

def terraform_init
  %x[ echo 'provider "ibm" {}' > dummy.tf
      terraform init ]
end

def terraform( dir, vars = nil )
  plan_dir  = "#{HOME_DIR}/lib/#{dir}"
  vars_file = "#{RUN_DIR}/#{dir}.auto.tfvars"

  # write vars
  if !vars.nil?
    puts "Writing #{vars_file}..."
    File.open vars_file, 'w' do | f |
      vars.each do | k, v |
        f.write "#{k} = \"#{v}\"\n"
      end
    end
  end

  # prepare command
  puts "Running terraform..."
  cmd = <<-EOT.gsub( /\s+/, ' ' ).strip
    terraform apply
      -auto-approve
      -state #{STATE_FILE}
      -compact-warnings
      #{plan_dir}
  EOT

  puts cmd

  # run terraform
  status = nil
  Open3.popen2e( cmd ) do | stdin, stdout_err, wait_thread |
    while line = stdout_err.gets
      puts line
    end
    status = wait_thread.value
  end

  status.exitstatus
end # terraform

# ---- MAIN ----

usage = <<~DOC
  NAME:
    mule - Create simple openshift v4.3 cluster on IBM Cloud

  USAGE:
    mule new cluster --name=<name> [--domain=<domain>] --location=<loc>...
    mule new node    --name=<name> --type=<type>
    mule rm  node    --name=<name> [--force]

  OPTIONS:
    --name=<name>           The name of the newly created resource
    --domain=<domain>       The domain of the cluster [default: openshift]
    --location=<loc>        The location of the resource, given as region:zone[:subnet]
    --type=<type>           The type of the node, one of (master|worker)
  DOC

begin
  options = Docopt::docopt( usage )
rescue Docopt::Exit => e
  puts usage
  exit 1
end

if options[ 'new' ]

  # new cluster
  if options[ 'cluster' ]
    puts "Creating new cluster..."

    cluster_name   = options[ '--name' ]
    cluster_domain = options[ '--domain' ]

    locations = options[ '--location' ]
    quit 'Error, only a single location is supported at this time' if locations.size != 1
    l1v_region, l1v_zone = locations[ 0 ].split ':'

    puts "Generating new ssh key..."
    %x[ rm -f ./#{cluster_name}.rsa ./#{cluster_name}.rsa.pub
        ssh-keygen -t rsa -b 4096 -N "" -f ./#{cluster_name}.rsa ]

    terraform_init()

    terraform 'vpc-infra', {
      :cluster_name   => cluster_name,
      :cluster_domain => cluster_domain,
      :l1v_region     => l1v_region,
      :l1v_zone       => l1v_zone }

    terraform 'lib/installation-server'
    terraform 'lib/network-server'
  end

elsif options[ 'add' ]
  puts 'Not implemented yet'
  exit 1

elsif options[ 'rm' ]
  puts 'Not implemented yet'
  exit 1

end

exit 0
